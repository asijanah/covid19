[{"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\index.js":"1","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\App.js":"2","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\components\\index.js":"3","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\components\\Cards\\Cards.jsx":"4","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\components\\CountryPicker\\CountryPicker.jsx":"5","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\components\\Chart\\Chart.jsx":"6","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\api\\index.js":"7"},{"size":232,"mtime":1607247574494,"results":"8","hashOfConfig":"9"},{"size":266,"mtime":1607445184731,"results":"10","hashOfConfig":"9"},{"size":168,"mtime":1607247968802,"results":"11","hashOfConfig":"9"},{"size":3586,"mtime":1607346545204,"results":"12","hashOfConfig":"9"},{"size":171,"mtime":1607250133616,"results":"13","hashOfConfig":"9"},{"size":1165,"mtime":1607510134876,"results":"14","hashOfConfig":"9"},{"size":339,"mtime":1607348305808,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"a19md8",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\index.js",[],["32","33"],"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\App.js",[],"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\components\\index.js",[],"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\components\\Cards\\Cards.jsx",["34"],"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css'\r\nimport { getCovid } from '../../api/index'\r\n\r\nconst Cards = () => {\r\n    const [covidData, setCovidData] = useState([]);\r\n\r\n    useEffect(async () => {\r\n        const response = await getCovid();\r\n        setCovidData(response)\r\n    }, [])\r\n    // console.log(covidData.data.deaths.value);\r\n\r\n\r\n    return (\r\n\r\n        <div className={styles.container}>\r\n            {covidData.data &&\r\n                <Grid container spacing={3} justify='center'>\r\n\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                        <CardContent>\r\n                            <Typography color='textSecondary' gutterBottom>Confirmed</Typography>\r\n                            <Typography variant='h5'>\r\n                                <CountUp start={0}\r\n                                    end={covidData.data.confirmed.value}\r\n                                    duration={3}\r\n                                    separator=','\r\n                                />\r\n                            </Typography>\r\n                            <Typography color='textSecondary'>{new Date(covidData.data.lastUpdate).toLocaleDateString('he-IL')}</Typography>\r\n                            <Typography variant='body2'>Number of Active Cases</Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n\r\n                    <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                        <CardContent>\r\n                            <Typography color='textSecondary' gutterBottom>Recoverd</Typography>\r\n                            <Typography variant='h5'>\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={covidData.data.recovered.value}\r\n                                    duration={3}\r\n                                    separator=','\r\n                                />\r\n                            </Typography>\r\n                            <Typography color='textSecondary'>{new Date(covidData.data.lastUpdate).toLocaleDateString('he-IL')}</Typography>\r\n                            <Typography variant='body2'>Number of Recoverd Cases</Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                        <CardContent>\r\n                            <Typography color='textSecondary' gutterBottom>Deaths</Typography>\r\n                            <Typography variant='h5'>\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={covidData.data.deaths.value}\r\n                                    duration={3}\r\n                                    separator=','\r\n                                />\r\n                            </Typography>\r\n                            <Typography color='textSecondary'>{new Date(covidData.data.lastUpdate).toLocaleDateString('he-IL')}</Typography>\r\n                            <Typography variant='body2'>Number of Deaths Cases</Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n                </Grid>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Cards","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\components\\CountryPicker\\CountryPicker.jsx",[],"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\components\\Chart\\Chart.jsx",["35","36"],"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\covid19\\src\\api\\index.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":12,"column":15,"nodeType":"43","endLine":15,"endColumn":6},{"ruleId":"44","severity":1,"message":"45","line":2,"column":16,"nodeType":"46","messageId":"47","endLine":2,"endColumn":19},{"ruleId":"41","severity":1,"message":"42","line":12,"column":15,"nodeType":"43","endLine":15,"endColumn":6},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-unused-vars","'Bar' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]